{"version":3,"sources":["components/NoHBD.js","components/YesHBD.js","components/Birthday.js","App.js","serviceWorker.js","index.js"],"names":["NoHBD","noHBDMessage","randomNoHBDMessage","Math","floor","random","length","react_default","a","createElement","className","Component","YesHBD","yesHBDMessage","randomYesHBDMessage","Birthday","_this","Object","classCallCheck","this","today","Date","possibleConstructorReturn","getPrototypeOf","call","handleNo","setState","isItYourBirthday","handleYes","componentDidMount","monthNumber","state","getUTCMonth","toString","console","log","month","body","day","getDate","year","getFullYear","onClick","components_NoHBD","components_YesHBD","App","class","src_components_Birthday","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c41c0c70.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass NoHBD extends Component {\n\n  render() {\n\nlet noHBDMessage = ['Awkward...', 'Hmmm I guess you should probably leave', 'Dang what a bummer', 'Happy Not Birthday', 'Try again tomorrow', 'Shhhh this can be our secert', 'ERROR NO BIRTHDAY DETECTED']\nlet randomIndex = Math.floor(Math.random() * noHBDMessage.length)\nlet randomNoHBDMessage = noHBDMessage[randomIndex]\n\n  return (\n    <div className=\"message\">\n    <h1> {randomNoHBDMessage} </h1>\n    </div>\n  );\n }\n}\n\nexport default NoHBD;\n","import React, {Component} from 'react';\n\nclass YesHBD extends Component {\n\n  render() {\n\n  let yesHBDMessage = ['Happy Birthday!', 'HBD!', 'Woooohoooo!', 'Congratulations!', 'Another successful revolution', 'Awesome!', 'Time to party!']\n  let randomIndex = Math.floor(Math.random() * yesHBDMessage.length)\n  let randomYesHBDMessage = yesHBDMessage[randomIndex]\n\n    return (\n      <div className=\"message\">\n      <h1> {randomYesHBDMessage} </h1>\n      </div>\n  );\n }\n}\n\nexport default YesHBD;\n","import React, {Component} from 'react';\nimport NoHBD from './NoHBD';\nimport YesHBD from './YesHBD';\nimport \"./Birthday.css\"\n\n\nclass Birthday extends Component {\n  constructor() {\n    let today = new Date()\n    super()\n    this.state = {\n      month: \"\",\n      today: today,\n      isItYourBirthday: 0,\n    }\n  }\n\n//Event Handlers\n\n\n  handleNo = () => {\n    this.setState({\n      isItYourBirthday: 1\n    })\n  }\n\n  handleYes = () => {\n    this.setState({\n      isItYourBirthday: 2,\n    })\n  }\n\n\n\n//Component\n\n  componentDidMount = () => {\n      let today = this.state.today\n      let monthNumber = (today.getUTCMonth() + 1).toString()\n      console.log(this.state.month)\n      console.log(monthNumber)\n      if(monthNumber === '1') {\n        this.setState({\n          month: \"Janurary\"\n        })\n      } else if (monthNumber === '2'){\n        this.setState({\n          month: \"Feburary\"\n        })\n      } else if (monthNumber === '3') {\n        this.setState({\n          month: \"March\"\n        })\n      } else if (monthNumber === '4') {\n        this.setState({\n          month: \"April\"\n        })\n      } else if (monthNumber === '5'){\n        this.setState({\n          month: \"May\"\n        })\n      } else if (monthNumber === '6'){\n        this.setState({\n          month: \"June\"\n        })\n      } else if (monthNumber === '7'){\n        this.setState({\n          month: \"July\"\n        })\n      } else if (monthNumber === '8'){\n        this.setState({\n          month: \"August\"\n        })\n      } else if (monthNumber === '9'){\n        this.setState({\n          month: \"September\"\n        })\n      } else if (monthNumber === '10'){\n        this.setState({\n          month: \"October\"\n        })\n      } else if (monthNumber === '11'){\n        this.setState({\n          month: \"November\"\n        })\n      } else if (monthNumber  === '12'){\n        this.setState({\n          month: \"December\"\n        })\n      }\n\n}\n\n\n//Render\n\n  render() {\n\n  let body = null\n\n\n\nif(this.state.isItYourBirthday === 0) {\n  let today = this.state.today\n  let day = (today.getDate().toString())\n  let month = this.state.month\n  let year = (today.getFullYear().toString())\n    body = (\n      <div>\n      <h1 className =\"HBDTitle\"> Is {month} {day}, {year} your birthday? </h1>\n      <div className=\"HBDButtons\">\n      <button className =\"yes\" onClick={this.handleYes}> Yes! </button>\n      <button className =\"no\" onClick={this.handleNo} > No! </button>\n      </div>\n      </div>\n    )\n  }\n\n  else if(this.state.isItYourBirthday === 1){\n    body = (\n      <NoHBD />\n    )\n  }\n\n  else if(this.state.isItYourBirthday === 2) {\n    body = (\n      <YesHBD />\n    )\n  }\n\n  return (\n    <div> {body} </div>\n  );\n }\n}\n\nexport default Birthday;\n","import React, {Component} from 'react';\nimport Birthday from './components/Birthday'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n  return (\n    <div className=\"container\">\n    <div className=\"card\">\n    <div class=\"shape-diamond\">\n    <div class=\"message-block\">\n    <div className=\"HBDTitle\">\n    <Birthday />\n    </div>\n    </div>\n    </div>\n    </div>\n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}